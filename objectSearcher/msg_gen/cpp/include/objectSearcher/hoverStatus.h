/* Auto-generated by genmsg_cpp for file /home/leng/ros/projects/objectSearcher/msg/hoverStatus.msg */
#ifndef OBJECTSEARCHER_MESSAGE_HOVERSTATUS_H
#define OBJECTSEARCHER_MESSAGE_HOVERSTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace objectSearcher
{
template <class ContainerAllocator>
struct hoverStatus_ {
  typedef hoverStatus_<ContainerAllocator> Type;

  hoverStatus_()
  : status(0)
  {
  }

  hoverStatus_(const ContainerAllocator& _alloc)
  : status(0)
  {
  }

  typedef int32_t _status_type;
  int32_t status;


  typedef boost::shared_ptr< ::objectSearcher::hoverStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::objectSearcher::hoverStatus_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct hoverStatus
typedef  ::objectSearcher::hoverStatus_<std::allocator<void> > hoverStatus;

typedef boost::shared_ptr< ::objectSearcher::hoverStatus> hoverStatusPtr;
typedef boost::shared_ptr< ::objectSearcher::hoverStatus const> hoverStatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::objectSearcher::hoverStatus_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::objectSearcher::hoverStatus_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace objectSearcher

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::objectSearcher::hoverStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::objectSearcher::hoverStatus_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::objectSearcher::hoverStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "86791dcf1de997ec7de5a0de7e4dcfcc";
  }

  static const char* value(const  ::objectSearcher::hoverStatus_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x86791dcf1de997ecULL;
  static const uint64_t static_value2 = 0x7de5a0de7e4dcfccULL;
};

template<class ContainerAllocator>
struct DataType< ::objectSearcher::hoverStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "objectSearcher/hoverStatus";
  }

  static const char* value(const  ::objectSearcher::hoverStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::objectSearcher::hoverStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 status\n\
\n\
";
  }

  static const char* value(const  ::objectSearcher::hoverStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::objectSearcher::hoverStatus_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::objectSearcher::hoverStatus_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.status);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct hoverStatus_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::objectSearcher::hoverStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::objectSearcher::hoverStatus_<ContainerAllocator> & v) 
  {
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
  }
};


} // namespace message_operations
} // namespace ros

#endif // OBJECTSEARCHER_MESSAGE_HOVERSTATUS_H

